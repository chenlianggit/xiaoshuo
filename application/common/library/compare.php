<?php
 class Compare { public function run($zym_26, $zym_35, $zym_25, $zym_28 = 0, $zym_38 = true) { if (empty($zym_35)) { $zym_29 = 0; foreach ($zym_26 as $zym_30 => $zym_42) { $zym_26[$zym_30]['oid'] = ++$zym_29; } } else { $zym_27 = $this->match($zym_26, $zym_35, $zym_25, $zym_38); foreach ($zym_26 as $zym_30 => $zym_42) { if (isset($zym_27[$zym_30])) { if (!$zym_28 || ($zym_28 && $zym_27[$zym_30]['oid'] > $zym_28)) { $zym_26[$zym_30]['oid'] = $zym_27[$zym_30]['oid']; } else { $zym_26[$zym_30]['oid'] = 0; } } else { $zym_26[$zym_30]['oid'] = 0; } } } return $zym_26; } protected function match($zym_39, $zym_35, $zym_31, $zym_38) { $zym_32 = $zym_27 = array(); foreach ($zym_39 as $zym_30 => $zym_42) { $zym_32[$zym_30] = $zym_42['name']; } $zym_37 = array(); foreach ($zym_35 as $zym_30 => $zym_42) { $zym_37[$zym_30] = $zym_42['name']; } foreach ($zym_32 as $zym_30 => $zym_36) { $zym_40 = array_search($zym_36, $zym_37); if ($zym_40 !== false) { $zym_27[$zym_30] = array('oid' => $zym_35[$zym_40]['oid'], 'type' => '完全匹配', 'key' => $zym_40); unset($zym_32[$zym_30]); } } foreach ($zym_37 as $zym_30 => $zym_42) { $zym_37[$zym_30] = $this->clearName($zym_42, $zym_31['novel']['name'], $zym_31['author']['name']); } foreach ($zym_32 as $zym_30 => $zym_36) { $zym_36 = $this->clearName($zym_36, $zym_31['novel']['name'], $zym_31['author']['name']); $zym_40 = array_search($zym_36, $zym_37); if ($zym_40 !== false) { $zym_27[$zym_30] = array('oid' => $zym_35[$zym_40]['oid'], 'type' => '清理信息后匹配', 'key' => $zym_40); unset($zym_32[$zym_30]); } else { $zym_32[$zym_30] = $zym_36; } } $zym_33 = $zym_37; foreach ($zym_37 as $zym_30 => $zym_42) { $zym_37[$zym_30] = str_replace(' ', '', $zym_42); } foreach ($zym_32 as $zym_30 => $zym_36) { $zym_40 = array_search(str_replace(' ', '', $zym_36), $zym_37); if ($zym_40 !== false) { $zym_27[$zym_30] = array('oid' => $zym_35[$zym_40]['oid'], 'type' => '清理信息和空格后相同', 'key' => $zym_40); unset($zym_32[$zym_30]); } } $zym_37 = $zym_33; foreach ($zym_37 as $zym_30 => $zym_42) { $zym_37[$zym_30] = $this->formatVolume($zym_42); } foreach ($zym_32 as $zym_30 => $zym_36) { $zym_36 = $this->formatVolume($zym_36); $zym_40 = array_search($zym_36, $zym_37); if ($zym_40 !== false) { $zym_27[$zym_30] = array('oid' => $zym_35[$zym_40]['oid'], 'type' => '整理分卷后相同', 'key' => $zym_40); unset($zym_32[$zym_30]); } else { $zym_32[$zym_30] = $zym_36; } } foreach ($zym_37 as $zym_30 => $zym_42) { $zym_37[$zym_30] = $this->clearChapter($zym_42); } foreach ($zym_32 as $zym_30 => $zym_36) { $zym_36 = $this->clearChapter($zym_36); $zym_40 = array_search($zym_36, $zym_37); if ($zym_40 !== false) { $zym_27[$zym_30] = array('oid' => $zym_35[$zym_40]['oid'], 'type' => '清理章节后相同', 'key' => $zym_40); unset($zym_32[$zym_30]); } else { $zym_32[$zym_30] = $zym_36; } } foreach ($zym_37 as $zym_30 => $zym_42) { $zym_37[$zym_30] = $this->formatChapter($zym_42); } foreach ($zym_32 as $zym_30 => $zym_36) { $zym_36 = $this->formatChapter($zym_36); $zym_40 = array_search($zym_36, $zym_37); if ($zym_40 !== false) { $zym_27[$zym_30] = array('oid' => $zym_35[$zym_40]['oid'], 'type' => '整理章节后相同', 'key' => $zym_40); unset($zym_32[$zym_30]); } else { $zym_32[$zym_30] = $zym_36; } } foreach ($zym_37 as $zym_30 => $zym_42) { $zym_37[$zym_30] = $this->clearNumber($zym_42); } foreach ($zym_32 as $zym_30 => $zym_36) { $zym_36 = $this->clearNumber($zym_36); $zym_40 = array_search($zym_36, $zym_37); if ($zym_40 !== false) { $zym_27[$zym_30] = array('oid' => $zym_35[$zym_40]['oid'], 'type' => '清理数字后相同', 'key' => $zym_40); unset($zym_32[$zym_30]); } else if ($zym_40 !== false) { $zym_27[$zym_30] = array('oid' => $zym_35[$zym_40]['oid'], 'type' => '清理数字后近似', 'key' => $zym_40); unset($zym_32[$zym_30]); } else { $zym_32[$zym_30] = $zym_36; } } foreach ($zym_37 as $zym_30 => $zym_42) { $zym_37[$zym_30] = $this->formatName($zym_42); } foreach ($zym_32 as $zym_30 => $zym_36) { $zym_36 = $this->formatName($zym_36); $zym_40 = array_search($zym_36, $zym_37); if ($zym_40 !== false) { $zym_27[$zym_30] = array('oid' => $zym_35[$zym_40]['oid'], 'type' => '整理标题后相同', 'key' => $zym_40); unset($zym_32[$zym_30]); } else if ($zym_40 !== false) { $zym_27[$zym_30] = array('oid' => $zym_35[$zym_40]['oid'], 'type' => '整理标题后近似', 'key' => $zym_40); unset($zym_32[$zym_30]); } else { $zym_32[$zym_30] = $zym_36; } } foreach ($zym_37 as $zym_30 => $zym_42) { $zym_37[$zym_30] = $this->formatNumber($zym_42); } foreach ($zym_32 as $zym_30 => $zym_36) { $zym_36 = $this->formatNumber($zym_36); $zym_40 = array_search($zym_36, $zym_37); if ($zym_40 !== false) { $zym_27[$zym_30] = array('oid' => $zym_35[$zym_40]['oid'], 'type' => '整理数字后相同', 'key' => $zym_40); unset($zym_32[$zym_30]); } else if ($zym_40 !== false) { $zym_27[$zym_30] = array('oid' => $zym_35[$zym_40]['oid'], 'type' => '整理数字后近似', 'key' => $zym_40); unset($zym_32[$zym_30]); } else { $zym_32[$zym_30] = $zym_36; } } foreach ($zym_37 as $zym_30 => $zym_42) { $zym_37[$zym_30] = $this->clearNumber($zym_42); } foreach ($zym_32 as $zym_30 => $zym_36) { $zym_36 = $this->clearNumber($zym_36); $zym_40 = array_search($zym_36, $zym_37); if ($zym_40 !== false) { $zym_27[$zym_30] = array('oid' => $zym_35[$zym_40]['oid'], 'type' => '清理数字后相同', 'key' => $zym_40); unset($zym_32[$zym_30]); } else if ($zym_40 !== false) { $zym_27[$zym_30] = array('oid' => $zym_35[$zym_40]['oid'], 'type' => '清理数字后近似', 'key' => $zym_40); unset($zym_32[$zym_30]); } else { $zym_32[$zym_30] = $zym_36; } } foreach ($zym_37 as $zym_30 => $zym_42) { $zym_37[$zym_30] = $this->clearLetter($zym_42); } foreach ($zym_32 as $zym_30 => $zym_36) { $zym_36 = $this->clearLetter($zym_36); $zym_40 = array_search($zym_36, $zym_37); if ($zym_40 !== false) { $zym_27[$zym_30] = array('oid' => $zym_35[$zym_40]['oid'], 'type' => '清理字母后相同', 'key' => $zym_40); unset($zym_32[$zym_30]); } else if ($zym_40 !== false) { $zym_27[$zym_30] = array('oid' => $zym_35[$zym_40]['oid'], 'type' => '清理字母后近似', 'key' => $zym_40); unset($zym_32[$zym_30]); } else { $zym_32[$zym_30] = $zym_36; } } if ($zym_38) { $zym_24 = array_keys($zym_32); foreach ($zym_24 as $zym_34 => $zym_30) { if (isset($zym_27[$zym_30 - 1]) && isset($zym_27[$zym_30 + 1]) && $zym_27[$zym_30 - 1]['oid'] + 2 == $zym_27[$zym_30 + 1]['oid']) { $zym_27[$zym_30] = array('oid' => $zym_27[$zym_30 - 1]['oid'] + 1, 'type' => '相隔宽度整理后匹配', 'key' => 0); unset($zym_32[$zym_30]); } } ksort($zym_27); $zym_20 = 0; foreach ($zym_27 as $zym_30 => $zym_42) { if ($zym_20 && $zym_30 - 1 > $zym_20) { if ($zym_30 - $zym_20 == $zym_42['oid'] - $zym_27[$zym_20]['oid']) { for ($zym_41 = $zym_20 + 1; $zym_41 < $zym_30; $zym_41++) { $zym_27[$zym_41] = array('oid' => $zym_27[$zym_20]['oid'] + $zym_41 - $zym_20, 'type' => '中间值判断', 'key' => 0); unset($zym_32[$zym_41]); } } } $zym_20 = $zym_30; } ksort($zym_27); $zym_24 = array_keys($zym_32); $zym_10 = end($zym_24); if (isset($zym_39[$zym_10]) && $zym_39[$zym_10] == end($zym_39)) { $zym_9 = []; arsort($zym_24); $zym_12 = end($zym_27); foreach ($zym_24 as $zym_42) { $zym_13 = end($zym_9); if (!$zym_12 || ($zym_42 > $zym_12['oid'] && ($zym_9 == array() || $zym_42 + 1 == $zym_13))) { $zym_9[] = $zym_42; } else { break; } } if ($zym_9) { asort($zym_9); $zym_7 = end($zym_35); $zym_29 = $zym_7['oid']; foreach ($zym_9 as $zym_30) { $zym_27[$zym_30] = array('oid' => ++$zym_29, 'type' => '尾部自动补充', 'key' => 0); } } } } return $zym_27; } protected function similar($zym_5, $zym_6) { $zym_40 = array_search($zym_5, $zym_6, true); if ($zym_40 !== false) return $zym_40; $zym_8 = array('percent' => 0, 'key' => false); foreach ($zym_6 as $zym_40 => $zym_11) { if ($zym_11 === '') continue; similar_text($zym_5, $zym_11, $zym_23); if ($zym_23 > $zym_8['percent']) $zym_8 = array('percent' => $zym_23, 'key' => $zym_40); } return $zym_8['percent'] >= 90 ? $zym_8['key'] : false; } protected function clearSpace($zym_5) { $zym_5 = preg_replace('/(\s|　)+/', ' ', $zym_5); while (strpos($zym_5, '  ')) { $zym_5 = str_replace('  ', ' ', $zym_5); } return trim($zym_5); } protected function clearName($zym_5, $zym_14 = null, $zym_21 = null) { $zym_5 = preg_replace('/^(?:\s|,|\.|\:|;|\'|"|\\|\-|\_|\+|\=|\!|\?|\~|\@|\#|\$|\%|\^|\&|\*|，|、|。|；|：|？|！|…|—|·|ˉ|‘|’|“|”|～|∶|＂|＇|｀|〃|．|<|\(|\[|\{|〈|《|（|「|『|［|〔|〖|【|｛|>|\)|\]|\}|〉|》|）|」|』|］|〕|〗|】|｝)*(?:>|\)|\]|\}|〉|》|）|」|』|］|〕|〗|】|｝)/', '', $zym_5); $zym_5 = preg_replace('/(?:<|\(|\[|\{|〈|《|（|「|『|［|〔|〖|【|｛)(?:\s|,|\.|\:|;|\'|"|\\|\-|\_|\+|\=|\!|\?|\~|\@|\#|\$|\%|\^|\&|\*|，|、|。|；|：|？|！|…|—|·|ˉ|‘|’|“|”|～|∶|＂|＇|｀|〃|．|<|\(|\[|\{|〈|《|（|「|『|［|〔|〖|【|｛|>|\)|\]|\}|〉|》|）|」|』|］|〕|〗|】|｝)*$/', '', $zym_5); $zym_5 = preg_replace('/\s*(?:<|\(|\[|\{|〈|《|（|「|『|［|〔|〖|【|｛)+(?:\s|,|\.|\:|;|\'|"|\\|\-|\_|\+|\=|\!|\?|\~|\@|\#|\$|\%|\^|\&|\*|，|、|。|；|：|？|！|…|—|·|ˉ|‘|’|“|”|～|∶|＂|＇|｀|〃|．)*(?:>|\)|\]|\}|〉|》|）|」|』|］|〕|〗|】|｝)+\s*/', ' ', $zym_5); $zym_5 = preg_replace('/^\d+[\.-_]+\s*/', '', $zym_5); if (!is_null($zym_14)) $zym_5 = preg_replace('/^(?:\s|《)*' . preg_quote($zym_14, '/') . '(?:\s|》)*(.+?)$/i', '\1', $zym_5); if (!is_null($zym_21)) $zym_5 = preg_replace('/^(.+?)(?:\s|' . preg_quote($zym_21, '/') . ')+$/i', '\1', $zym_5); return $this->clearSpace(strtoupper($zym_5)); } protected function clearVolume($zym_5, $zym_22) { foreach ($zym_22 as $zym_19) { $zym_19 = preg_replace('/\s+/', chr(1), trim($zym_19)); $zym_19 = preg_quote($zym_19, '/'); $zym_19 = preg_replace('/^(.+?)' . chr(1) . '(.+?)$/', '\1(\s*\2)?', $zym_19, 1); $zym_19 = str_replace(chr(1), '\s*', $zym_19); $zym_5 = preg_replace('/^\s*' . $zym_19 . '\s*(.+?)/i', '\1', $zym_5); } return $this->clearSpace($zym_5); } protected function formatVolume($zym_5) { $zym_5 = preg_replace('/^(?:(?:\s|VIP|最新|防采集)\s*(?:卷|分卷|章节)?|正文|全文)+(.+?)$/i', '\1', $zym_5); $zym_5 = preg_replace('/^((?:(?:部|卷|集|篇|册)(?:\s|一|二|三|四|五|六|七|八|九|十|百|千|万|两|廿|卅|卌|零|〇|１|２|３|４|５|６|７|８|９|０|[0-9])+|(?:第)?(?:\s|一|二|三|四|五|六|七|八|九|十|百|千|万|两|廿|卅|卌|零|〇|１|２|３|４|５|６|７|８|９|０|[0-9])+(?:部|卷|集|篇|册))(?:.(?<!\/|\_|\-|—|&|<|\(|\[|\{|〈|《|（|「|『|［|〔|〖|【|｛|>|\)|\]|\}|〉|》|）|」|』|］|〕|〗|】|｝))*)\s*(第(?:\s|一|二|三|四|五|六|七|八|九|十|百|千|万|两|廿|卅|卌|零|〇|１|２|３|４|５|６|７|８|９|０|[0-9])+(?:章|节|回|\s).*)$/', '\1<split>\2', $zym_5); if (strpos($zym_5, '<split>') === false) $zym_5 = preg_replace('/^((?:(?:部|卷|集|篇|册)(?:\s|一|二|三|四|五|六|七|八|九|十|百|千|万|两|廿|卅|卌|零|〇|１|２|３|４|５|６|７|８|９|０|[0-9])+|(?:第)?(?:\s|一|二|三|四|五|六|七|八|九|十|百|千|万|两|廿|卅|卌|零|〇|１|２|３|４|５|６|７|８|９|０|[0-9])+(?:部|卷|集|篇|册))(?:.*.(?<!\s|\/|\_|\-|—|&|<|\(|\[|\{|〈|《|（|「|『|［|〔|〖|【|｛|>|\)|\]|\}|〉|》|）|」|』|］|〕|〗|】|｝|第|一|二|三|四|五|六|七|八|九|十|百|千|万|两|廿|卅|卌|零|〇|１|２|３|４|５|６|７|８|９|０|[0-9]))?)\s*((?:一|二|三|四|五|六|七|八|九|十|百|千|万|两|廿|卅|卌|零|〇|１|２|３|４|５|６|７|８|９|０|[0-9])+(?:章|节|回|\s).*)$/', '\1<split>\2', $zym_5); if (strpos($zym_5, '<split>') === false) return $this->clearSpace($zym_5); $zym_18 = explode('<split>', $zym_5, 2); return $this->clearSpace($zym_18[1]); } protected function clearChapter($zym_5) { $zym_5 = preg_replace('/(.+?)(?:<|\(|\[|\{|〈|《|（|「|『|［|〔|〖|【|｛)(?:\s|[0-9]+\s*\/\s*[0-9]+|(?:\s|一|二|三|四|五|六|七|八|九|十|百|千|万|两|廿|卅|卌|零|〇|１|２|３|４|５|６|７|８|９|０|[0-9])+(?:字|张|票)+|(?:一|二|三|四|五|六|七|八|九|十|两)+(?:章|节|回|更|张)?合一|(?:第)?(?:\s|一|二|三|四|五|六|七|八|九|十|１|２|３|４|５|６|７|８|９|０|[0-9])+更|更新|加更|补更|月票|红票|点击|推荐|收藏|支持|订阅|首订|打赏|鲜花|保底|章节|大章|爆发|解禁|免费|跪求|拜求|今日|昨日|今天|昨天|正确|修正|图片|文字|会员|书友|盟主|养肥|书名|小说|作者|更|求|票|修|补|欠|图|文|版|书|啊|呀|呢|哦|的|地|得|了|,|\.|\:|;|\'|"|\\|\-|\_|\+|\=|\!|\?|\~|\@|\#|\$|\%|\^|\&|\*|，|、|。|；|：|？|！|…|—|·|ˉ|‘|’|“|”|～|∶|＂|＇|｀|〃|．|<|\(|\[|\{|〈|《|（|「|『|［|〔|〖|【|｛|>|\)|\]|\}|〉|》|）|」|』|］|〕|〗|】|｝)*(?:(?:>|\)|\]|\}|〉|》|）|」|』|］|〕|〗|】|｝)|$)/', '\1', $zym_5); if (preg_match('/(?:<|\(|\[|\{|〈|《|（|「|『|［|〔|〖|【|｛)+((?:.(?<!>|\)|\]|\}|〉|》|）|」|』|］|〕|〗|】|｝))+?)(?:>|\)|\]|\}|〉|》|）|」|』|］|〕|〗|】|｝)?\s*$/', $zym_5, $zym_15)) { if ($zym_15[0] !== $zym_5 && strlen($zym_15[1]) > 3 && (stripos($zym_15[1], 'VIP') !== false || strpos($zym_15[1], '更新') !== false || strpos($zym_15[1], '月票') !== false || strpos($zym_15[1], '点击') !== false || strpos($zym_15[1], '推荐') !== false || strpos($zym_15[1], '收藏') !== false || strpos($zym_15[1], '打赏') !== false || strpos($zym_15[1], '订阅') !== false || strpos($zym_15[1], '支持') !== false || strpos($zym_15[1], '鲜花') !== false || strpos($zym_15[1], '保底') !== false || strpos($zym_15[1], '合一') !== false || strpos($zym_15[1], '大章') !== false || strpos($zym_15[1], '章节') !== false || strpos($zym_15[1], '爆发') !== false)) $zym_5 = str_replace($zym_15[0], '', $zym_5); } return $this->clearSpace($zym_5); } protected function formatChapter($zym_5) { $zym_5 = preg_replace('/^\s*(?:d|第|弟|递|滴|低|地|底|帝|的)*((?:\s|一|二|三|四|五|六|七|八|九|十|百|千|万|两|廿|卅|卌|零|〇|１|２|３|４|５|６|７|８|９|０|[0-9])+(?:部|卷|集|篇|册|章|节|回))\s*(.*)$/', '第\1 \2', $zym_5); $zym_5 = preg_replace('/\s*(,|\.|\:|;|\'|"|\\|\-|\_|\+|\=|\!|\?|\~|\@|\#|\$|\%|\^|\&|\*|，|、|。|；|：|？|！|…|—|·|ˉ|‘|’|“|”|～|∶|＂|＇|｀|〃|．|<|\(|\[|\{|〈|《|（|「|『|［|〔|〖|【|｛|>|\)|\]|\}|〉|》|）|」|』|］|〕|〗|】|｝)\s*/', '\1', $zym_5); $zym_5 = str_replace(array(',', ':', '?', '!', '(', ')'), array('，', '：', '？', '！', '（', '）'), $zym_5); $zym_5 = preg_replace('/(?:\<|\[|\{|〈|《|（|「|『|［|〔|〖|【|｛|\()+(.+?)(?:\)|\>|\]|\}|〉|》|）|」|』|］|〕|〗|】|｝)?+$/', '\1', $zym_5); $zym_5 = preg_replace('/\s*[\(（]([零|一|二|三|四|五|六|七|八|九|十|百|千|壹|贰|叁|肆|伍|陆|柒|捌|玖]+?)[）\)]+$/', ' \1', $zym_5); return $this->clearSpace($zym_5); } protected function formatName($zym_5) { preg_match_all('/[\w\x{4e00}-\x{9fa5}]/u', $zym_5, $zym_15); $zym_5 = implode($zym_15[0]); $zym_5 = str_replace(' ', '', $zym_5); return $zym_5; } protected function formatNumber($zym_5) { $zym_5 = str_replace(array('第', '部', '卷', '集', '篇', '册', '章', '节', '回'), '', $zym_5); $zym_5 = str_replace(array('０', '１', '２', '３', '４', '５', '６', '７', '８', '９', '〇', '一', '二', '三', '四', '五', '六', '七', '八', '九', '十', '百', '千', '万', '两', '零', '壹', '贰', '叁', '肆', '伍', '陆', '柒', '捌', '玖', '拾', '佰', '仟', '俩', '⒈', '⒉', '⒊', '⒋', '⒌', '⒍', '⒎', '⒏', '⒐', '⒑', '⒒', '⒓', '⒔', '⒕', '⒖', '⒗', '⒘', '⒙', '⒚', '⒛', '⑴', '⑵', '⑶', '⑷', '⑸', '⑹', '⑺', '⑻', '⑼', '⑽', '⑾', '⑿', '⒀', '⒁', '⒂', '⒃', '⒄', '⒅', '⒆', '⒇', '①', '②', '③', '④', '⑤', '⑥', '⑦', '⑧', '⑨', '⑩', '㈠', '㈡', '㈢', '㈣', '㈤', '㈥', '㈦', '㈧', '㈨', '㈩', 'Ⅰ', 'Ⅱ', 'Ⅲ', 'Ⅳ', 'Ⅴ', 'Ⅵ', 'Ⅶ', 'Ⅷ', 'Ⅸ', 'Ⅹ', 'Ⅺ', 'Ⅻ'), array('0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '', '', '', '', '2', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '', '', '', '2', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12'), $zym_5); return $zym_5; } protected function clearNumber($zym_5) { $zym_5 = preg_replace('/^\d+/', '', $zym_5); return $zym_5; } protected function clearLetter($zym_5) { $zym_5 = str_replace(array('Ａ', 'ａ', 'Ｂ', 'ｂ', 'Ｃ', 'ｃ', 'Ｄ', 'ｄ', 'Ｅ', 'ｅ', 'Ｆ', 'ｆ', 'Ｇ', 'ｇ', 'Ｈ', 'ｈ', 'Ｉ', 'ｉ', 'Ｊ', 'ｊ', 'Ｋ', 'ｋ', 'Ｌ', 'ｌ', 'Ｍ', 'ｍ', 'Ｎ', 'ｎ', 'Ｏ', 'ｏ', 'Ｐ', 'ｐ', 'Ｑ', 'ｑ', 'Ｒ', 'ｒ', 'Ｓ', 'ｓ', 'Ｔ', 'ｔ', 'Ｕ', 'ｕ', 'Ｖ', 'ｖ', 'Ｗ', 'ｗ', 'Ｘ', 'ｘ', 'Ｙ', 'ｙ', 'Ｚ', 'ｚ'), '', $zym_5); $zym_5 = preg_replace('/[a-zA-Z]/', '', $zym_5); return $zym_5; } public function test($zym_16, $zym_17) { var_dump('初始信息'); var_dump($zym_16, $zym_17); var_dump('1 清理信息'); $zym_16 = $this->clearName($zym_16); $zym_17 = $this->clearName($zym_17); var_dump($zym_16, $zym_17); var_dump('2 清理空白'); $zym_16 = str_replace(' ', '', ($zym_16)); $zym_17 = str_replace(' ', '', ($zym_17)); var_dump($zym_16, $zym_17); var_dump('3 整理分卷'); $zym_16 = $this->formatVolume($zym_16); $zym_17 = $this->formatVolume($zym_17); var_dump($zym_16, $zym_17); var_dump('4清理章节'); $zym_16 = $this->clearChapter($zym_16); $zym_17 = $this->clearChapter($zym_17); var_dump($zym_16, $zym_17); var_dump('5 整理章节'); $zym_16 = $this->formatName($zym_16); $zym_17 = $this->formatName($zym_17); var_dump($zym_16, $zym_17); var_dump('6 整理数字'); $zym_16 = $this->formatNumber($zym_16); $zym_17 = $this->formatNumber($zym_17); var_dump($zym_16, $zym_17); var_dump('7 清理数字'); $zym_16 = $this->clearNumber($zym_16); $zym_17 = $this->clearNumber($zym_17); var_dump($zym_16, $zym_17); var_dump('8 清理字母'); $zym_16 = $this->clearLetter($zym_16); $zym_17 = $this->clearLetter($zym_17); var_dump($zym_16, $zym_17); } }
?>